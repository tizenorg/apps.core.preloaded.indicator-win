CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(indicator C)

IF("${CMAKE_BUILD_TYPE}" STREQUAL "")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF("${CMAKE_BUILD_TYPE}" STREQUAL "")

SET(VENDOR "org.tizen")
SET(PACKAGE ${PROJECT_NAME})
SET(PKGNAME "${VENDOR}.${PACKAGE}")
SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(PREFIXRW ${CMAKE_INSTALL_PREFIXRW})
SET(BINDIR "${PREFIX}/bin")
SET(RESDIR "${PREFIX}/res")
SET(DATADIR "${PREFIXRW}/data")
SET(LOCALEDIR "${RESDIR}/locale")
SET(ICONDIR "${RESDIR}/icons")
SET(EDJDIR "${RESDIR}/edje")
SET(CHANGEABLEDIR "${PREFIX}/shared/res/tables")
SET(DESKTOPDIR "/usr/share/applications")
SET(MANIFESTXMLDIR "/usr/share/packages")

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/daemon DAEMON_SRCS)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test TEST_SRCS)
#AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/modules MODULE_SRCS)
FILE(GLOB_RECURSE MODULE_SRCS modules/*.c)

SET(SRCS ${DAEMON_SRCS} ${MODULE_SRCS} ${TEST_SRCS})

INCLUDE_DIRECTORIES(
		${CMAKE_CURRENT_SOURCE_DIR}/daemon
		${CMAKE_CURRENT_SOURCE_DIR}/modules
		${CMAKE_CURRENT_SOURCE_DIR}/data/resource
		${CMAKE_CURRENT_SOURCE_DIR}/test
		)

SET(CMAKE_SKIP_BUILD_RPATH TRUE)

FIND_PROGRAM(UNAME NAMES uname)
EXEC_PROGRAM("${UNAME}" ARGS "-m" OUTPUT_VARIABLE "ARCH")

IF("${ARCH}" STREQUAL "armv7l")
    ADD_DEFINITIONS("-DDEVICE_BUILD")
    MESSAGE("Building for target: add -DDEVICE_BUILD")
ENDIF("${ARCH}" STREQUAL "armv7l")

INCLUDE(FindPkgConfig)
pkg_check_modules(pkgs REQUIRED
	capi-appfw-application
	capi-appfw-app-manager
	capi-system-runtime-info
	capi-network-bluetooth
	capi-appfw-preference
	capi-system-system-settings
	capi-media-player
	capi-media-sound-manager
	capi-media-metadata-extractor
	capi-network-wifi
	capi-ui-efl-util
	appcore-common
	dlog
	ecore
#	ecore-x
	ecore-evas
	ecore-file
	edbus
	edje
	elementary
	evas
	eina
	edbus
	libprivilege-control
	notification
#	utilX
	vconf
	minicontrol-monitor
	feedback
	pkgmgr-info
	efl-assist
	tapi
	tzsh-quickpanel-service
)

FOREACH(flag ${pkgs_CFLAGS})
	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
ENDFOREACH(flag)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS} -fPIE")

SET(CMAKE_C_FLAGS_PROFILING    "-O0 -g -pg -fPIE")
SET(CMAKE_CXX_FLAGS_PROFILING  "-O0 -std=c++0x -g -pg -fPIE")
SET(CMAKE_C_FLAGS_DEBUG        "-O0 -g -fPIE")
SET(CMAKE_CXX_FLAGS_DEBUG      "-O0 -std=c++0x -g -fPIE")
SET(CMAKE_C_FLAGS_RELEASE      "-O2 -g -fPIE")
SET(CMAKE_CXX_FLAGS_RELEASE    "-O2 -std=c++0x -g -fPIE")
SET(CMAKE_C_FLAGS_CCOV         "-O2 -g --coverage -fPIE")
SET(CMAKE_CXX_FLAGS_CCOV       "-O2 -std=c++0x -g --coverage -fPIE")

SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed -pie")

ADD_DEFINITIONS("-DVENDOR=\"${VENDOR}\"")
ADD_DEFINITIONS("-DPACKAGE=\"${PACKAGE}\"")
ADD_DEFINITIONS("-DPACKAGE_NAME=\"${PKGNAME}\"")
ADD_DEFINITIONS("-DPREFIX=\"${PREFIX}\"")
ADD_DEFINITIONS("-DRESDIR=\"${RESDIR}\"")
ADD_DEFINITIONS("-DDATADIR=\"${DATADIR}\"")
ADD_DEFINITIONS("-DLOCALEDIR=\"${LOCALEDIR}\"")
ADD_DEFINITIONS("-DICONDIR=\"${ICONDIR}\"")
ADD_DEFINITIONS("-DEDJDIR=\"${EDJDIR}\"")
ADD_DEFINITIONS("-DHOME_KEY_EMULATION")
ADD_DEFINITIONS("-DINDICATOR_SUPPORT_OPACITY_MODE")
ADD_DEFINITIONS("-D_DLOG_USED")


ADD_EXECUTABLE(${PROJECT_NAME} ${SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} -licui18n -licuuc)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${pkgs_LDFLAGS})

INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${BINDIR})
INSTALL(DIRECTORY DESTINATION ${DATADIR})
#INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PKGNAME}.efl DESTINATION /etc/smack/accesses.d)

ADD_SUBDIRECTORY(data)
